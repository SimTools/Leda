#ifndef __TFFT_H__
#define __TFFT_H__
//_____________________________________________________________________________
//
// ========
//  TFFT.h
// ========
//
//	C Version 1.0 by Steve Sampson, Public Domain
//
//	This program is based on the work by W. D. Stanley
//	and S. J. Peterson, Old Dominion University.
//
//	This program produces a Frequency Domain display
//	from the Time Domain data input using the Fast Fourier Transform.
//
//	The REAL data is generated by the in-phase (I) channel and the
//	IMAGINARY data is produced by the quadrature-phase (Q) channel of
//	a Doppler Radar receiver.  The middle filter is zero Hz.  Closing
//	targets are displayed to the right, and Opening targets to the left.
//
//	Note: With IMAGINARY data set to zero the output is a mirror image.
//
//	Usage:	fft  samples  input_data  output_data
//	Where 'samples' is a power of two
//
//	Array Version for Turbo C 1.5
//
//
//  FFT Ver1.1
//  This program is extend by K.Mori. Version 1.0 for Borland C++ 4.0 
//  Usage: fft [option] samples sample_frequency input output
//  option: /ri ...Real-Image input data(default)
//          /ro ...Real Only input data
//          /tr ...Time-Real input data(ignore Time)
//  Where samples is a power of 2
//
//_____________________________________________________________________________
//

#include  "TObject.h"

//_____________________________________________________________________________
//
// ============
//  Class TFFT
// ============

class TFFT
{
public:
   TFFT() : fDone(false), fNsamples(0), fPower(0), fSampleFreq(333.) {}
   TFFT(int samples, double samplefreq, double real[], double imag[]);
   virtual ~TFFT() {}

   void   SetData(int samples, double samplefreq, double real[], double imag[]);
   double GetMaxAmp();
   double GetMagnitude(int index);
   double GetFrequency(int index);
   void   GetResult(double result[][2]);

private:
   void   DoFFT();
   int    Permute(int index);


private:
   bool   fDone;		// flag to tell FFT has been done or not
   int    fNsamples;		// no of sampled points
   int    fPower;		// log2(fNsamples)
   double fSampleFreq;		// sampling frequency
   double fMaxAmp;		// maximum amplitude
   double fReal[8192];		// real part
   double fImag[8192];		// imaginary part

   ClassDef(TFFT, 1) 		// Fast Fourier transform class
};

#endif
